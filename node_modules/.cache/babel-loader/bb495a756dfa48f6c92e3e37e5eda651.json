{"ast":null,"code":"import _toConsumableArray from \"/Users/prakhar/Documents/Blockchain/Decentragram/decentragram/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"/Users/prakhar/Documents/Blockchain/Decentragram/decentragram/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/prakhar/Documents/Blockchain/Decentragram/decentragram/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/prakhar/Documents/Blockchain/Decentragram/decentragram/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/prakhar/Documents/Blockchain/Decentragram/decentragram/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/prakhar/Documents/Blockchain/Decentragram/decentragram/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"/Users/prakhar/Documents/Blockchain/Decentragram/decentragram/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/prakhar/Documents/Blockchain/Decentragram/decentragram/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/prakhar/Documents/Blockchain/Decentragram/decentragram/src/components/App.js\";\nimport React, { Component } from 'react';\nimport Web3 from 'web3';\nimport Identicon from 'identicon.js';\nimport './App.css';\nimport Decentragram from '../abis/Decentragram.json';\nimport Navbar from './Navbar';\nimport Main from './Main';\n\nvar ipfsClient = require('ipfs-http-client');\n\nvar ipfs = ipfsClient({\n  host: \"ipfs.infura.io\",\n  port: 5001,\n  protocol: \"https\"\n});\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"componentWillMount\",\n    value: function () {\n      var _componentWillMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      }\n\n      return componentWillMount;\n    }()\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                window.web3 = new Web3(window.ethereum);\n                _context2.next = 4;\n                return window.ethereum.enable();\n\n              case 4:\n                _context2.next = 7;\n                break;\n\n              case 6:\n                if (window.web3) {\n                  window.web3 = new Web3(window.web3.currentProvider);\n                } else {\n                  window.alert(\"Non-ethereum browser detected. Try MetaMask..!!\");\n                }\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var web3, accounts, networkId, networkData, decentragram, imageCount, i, image;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                web3 = window.web3; // Fetch account details\n\n                _context3.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                accounts = _context3.sent;\n                this.setState({\n                  account: accounts[0]\n                }); // Get Network ID\n\n                _context3.next = 7;\n                return web3.eth.net.getId();\n\n              case 7:\n                networkId = _context3.sent;\n                // this will return 5777 from Ganache\n                networkData = Decentragram.networks[networkId]; // Access Contract\n\n                if (!networkData) {\n                  _context3.next = 28;\n                  break;\n                }\n\n                decentragram = web3.eth.Contract(Decentragram.abi, networkData.address);\n                this.setState({\n                  decentragram: decentragram\n                });\n                _context3.next = 14;\n                return decentragram.methods.imageCounter().call();\n\n              case 14:\n                imageCount = _context3.sent;\n                this.setState({\n                  imageCount: imageCount\n                }); // Load Images\n\n                i = 1;\n\n              case 17:\n                if (!(i < imageCount)) {\n                  _context3.next = 25;\n                  break;\n                }\n\n                _context3.next = 20;\n                return decentragram.methods.images(i).call();\n\n              case 20:\n                image = _context3.sent;\n                this.setState({\n                  images: [].concat(_toConsumableArray(this.state.images), [image])\n                });\n\n              case 22:\n                i++;\n                _context3.next = 17;\n                break;\n\n              case 25:\n                this.setState({\n                  loading: false\n                });\n                _context3.next = 29;\n                break;\n\n              case 28:\n                window.alert(\"Contract is not yet deployed..!!\");\n\n              case 29:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }()\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.captureFile = function (event) {\n      event.preventDefault();\n      var file = event.target.files[0];\n      var reader = new window.FileReader();\n      reader.readAsArrayBuffer(file);\n\n      reader.onloadend = function () {\n        _this.setState({\n          buffer: Buffer(reader.result)\n        });\n\n        console.log(\"Buffer\", _this.state.buffer);\n      };\n    };\n\n    _this.uploadImage = function (description) {\n      console.log(\"Submitting file to IPFS\"); // Adding file to IPFS\n\n      ipfs.add(_this.state.buffer, function (error, result) {\n        console.log(\"IPFS Result \", result);\n\n        if (error) {\n          console.log(\"Error\", error);\n          return;\n        }\n\n        _this.setState({\n          loading: true\n        });\n\n        _this.state.decentragram.methods.uploadImage(result[0].hash, description).send({\n          from: _this.state.account\n        }).on(\"transactionHash\", function (hash) {\n          _this.setState({\n            loading: false\n          });\n        });\n      });\n    };\n\n    _this.state = {\n      account: '',\n      decentragram: null,\n      images: [],\n      loading: true\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, React.createElement(Navbar, {\n        account: this.state.account,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }), this.state.loading ? React.createElement(\"div\", {\n        id: \"loader\",\n        className: \"text-center mt-5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, \"Loading...\")) : React.createElement(Main, {\n        images: this.state.images,\n        captureFile: this.captureFile,\n        uploadImage: this.uploadImage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/prakhar/Documents/Blockchain/Decentragram/decentragram/src/components/App.js"],"names":["React","Component","Web3","Identicon","Decentragram","Navbar","Main","ipfsClient","require","ipfs","host","port","protocol","App","loadWeb3","loadBlockchainData","window","ethereum","web3","enable","currentProvider","alert","eth","getAccounts","accounts","setState","account","net","getId","networkId","networkData","networks","decentragram","Contract","abi","address","methods","imageCounter","call","imageCount","i","images","image","state","loading","props","captureFile","event","preventDefault","file","target","files","reader","FileReader","readAsArrayBuffer","onloadend","buffer","Buffer","result","console","log","uploadImage","description","add","error","hash","send","from","on"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Web3 from 'web3';\nimport Identicon from 'identicon.js';\nimport './App.css';\nimport Decentragram from '../abis/Decentragram.json'\nimport Navbar from './Navbar'\nimport Main from './Main'\n\nconst ipfsClient = require('ipfs-http-client')\nconst ipfs = ipfsClient({ host: \"ipfs.infura.io\", port: 5001, protocol: \"https\" })\n\n\nclass App extends Component {\n  async componentWillMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n      window.alert(\"Non-ethereum browser detected. Try MetaMask..!!\")\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3\n\n    // Fetch account details\n    const accounts = await web3.eth.getAccounts()\n    this.setState({ account: accounts[0] })\n\n    // Get Network ID\n    const networkId = await web3.eth.net.getId() // this will return 5777 from Ganache\n    const networkData = Decentragram.networks[networkId]\n    // Access Contract\n    if (networkData) {\n      const decentragram = web3.eth.Contract(Decentragram.abi, networkData.address)\n      this.setState({ decentragram: decentragram })\n      const imageCount = await decentragram.methods.imageCounter().call()\n      this.setState({ imageCount })\n\n      // Load Images\n      for (var i = 1; i < imageCount; i++) {\n        const image = await decentragram.methods.images(i).call()\n        this.setState({ images: [...this.state.images, image] })\n      }\n      this.setState({ loading: false })\n    } else {\n      window.alert(\"Contract is not yet deployed..!!\")\n    }\n  }\n  captureFile = event => {\n    event.preventDefault()\n    const file = event.target.files[0]\n    const reader = new window.FileReader()\n    reader.readAsArrayBuffer(file)\n\n    reader.onloadend = () => {\n      this.setState({ buffer: Buffer(reader.result) })\n      console.log(\"Buffer\", this.state.buffer)\n    }\n  }\n\n  uploadImage = description => {\n    console.log(\"Submitting file to IPFS\")\n    // Adding file to IPFS\n    ipfs.add(this.state.buffer, (error, result) => {\n      console.log(\"IPFS Result \", result)\n      if (error) {\n        console.log(\"Error\", error)\n        return\n      }\n      this.setState({ loading: true })\n      this.state.decentragram.methods.uploadImage(result[0].hash, description).send({ from: this.state.account }).on(\"transactionHash\", (hash) => {\n        this.setState({ loading: false })\n      })\n    })\n  }\n  constructor(props) {\n    super(props)\n    this.state = {\n      account: '',\n      decentragram: null,\n      images: [],\n      loading: true\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar account={this.state.account} />\n        {this.state.loading\n          ? <div id=\"loader\" className=\"text-center mt-5\"><p>Loading...</p></div>\n          : <Main\n            images={this.state.images}\n            captureFile={this.captureFile}\n            uploadImage={this.uploadImage}\n          />\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}